version: '3.8'

# MockPilot Docker Compose Configuration
#
# This file sets up the development environment for MockPilot using Docker.
# It includes Redis, Weaviate, MongoDB, and all microservices needed for the full stack.
#
# To use:
# 1. Ensure you have an .env file in the project root with required secrets:
#    OPENAI_API_KEY=your_openai_api_key_here
#    JWT_SECRET_KEY=your_jwt_secret_here
#
# 2. Run from the project root:
#    docker-compose -f infra/docker/docker-compose.yml up --build

services:
  # --- Infrastructure Services ---
  redis:
    image: redis:7-alpine
    container_name: mockpilot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - mockpilot_network

  weaviate:
    image: semitechnologies/weaviate:1.25.0
    container_name: mockpilot-weaviate
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: /var/lib/weaviate
      DEFAULT_VECTORIZER_MODULE: none
      ENABLE_MODULES: text2vec-huggingface
      CLUSTER_HOSTNAME: node1
      # OPENAI_APIKEY: ${OPENAI_API_KEY} # If using text2vec-openai
    volumes:
      - weaviate_data:/var/lib/weaviate
    restart: on-failure:0
    networks:
      - mockpilot_network

  mongodb:
    image: mongo:6
    container_name: mockpilot-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    restart: always
    networks:
      - mockpilot_network

  # --- Backend Services ---
  orchestrator:
    build:
      context: ../../backend/orchestrator
      dockerfile: Dockerfile
    container_name: mockpilot-orchestrator
    ports:
      - "8000:8000"
    depends_on:
      - redis
    environment:
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-development_jwt_secret}
      - API_VERSION=v1
      - CORS_ALLOWED_ORIGINS=http://localhost:5173,http://frontend:5173
    volumes:
      - ../../backend/orchestrator:/app
      - orchestrator_cache:/app/.cache
    restart: unless-stopped
    networks:
      - mockpilot_network

  speech_to_text:
    build:
      context: ../../backend/speech_to_text
      dockerfile: Dockerfile
    container_name: mockpilot-speech-to-text
    ports:
      - "8001:8001"
    depends_on:
      - redis
    environment:
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_TRANSCRIPTS_CHANNEL_NAME=transcripts
      - AUDIO_SAMPLE_RATE=16000
      - VAD_THRESHOLD=0.6
      - VAD_MIN_SILENCE_DURATION_MS=350
    volumes:
      - ../../backend/speech_to_text:/app
      - stt_cache:/app/.cache
    restart: unless-stopped
    networks:
      - mockpilot_network

  intent_extractor:
    build:
      context: ../../backend/intent_extractor
      dockerfile: Dockerfile
    container_name: mockpilot-intent-extractor
    depends_on:
      - redis
    environment:
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_TRANSCRIPTS_CHANNEL_NAME=transcripts
      - REDIS_INTENTS_CHANNEL_NAME=intents
    volumes:
      - ../../backend/intent_extractor:/app
      - intent_cache:/app/.cache
    restart: unless-stopped
    networks:
      - mockpilot_network

  trigger_service:
    build:
      context: ../../backend/trigger_service
      dockerfile: Dockerfile
    container_name: mockpilot-trigger-service
    depends_on:
      - redis
      - intent_extractor
    environment:
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_INTENTS_CHANNEL_NAME=intents
      - REDIS_DESIGN_SPECS_CHANNEL_NAME=design_specs
      - DEBOUNCE_WINDOW_SECONDS=5.0
      - SILENCE_GAP_SECONDS=1.5
      - CONFIDENCE_THRESHOLD=0.75
    volumes:
      - ../../backend/trigger_service:/app
    restart: unless-stopped
    networks:
      - mockpilot_network

  design_mapper:
    build:
      context: ../../backend/design_mapper
      dockerfile: Dockerfile
    container_name: mockpilot-design-mapper
    ports:
      - "8002:8002"
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAPPINGS_FILE_PATH=/data/mappings/mappings.json
      - ENABLE_HOT_RELOAD=true
    volumes:
      - ../../backend/design_mapper:/app
      - ../../data/mappings:/data/mappings
    restart: unless-stopped
    networks:
      - mockpilot_network

  code_generator:
    build:
      context: ../../backend/code_generator
      dockerfile: Dockerfile
    container_name: mockpilot-code-generator
    ports:
      - "8003:8003"
    depends_on:
      - redis
      - design_mapper
    environment:
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_DESIGN_SPECS_CHANNEL_NAME=design_specs
      - REDIS_COMPONENTS_CHANNEL_NAME=components
      - DESIGN_MAPPER_URL=http://design_mapper:8002
    volumes:
      - ../../backend/code_generator:/app
      - code_gen_cache:/app/.cache
    restart: unless-stopped
    networks:
      - mockpilot_network

  sentiment_miner:
    build:
      context: ../../backend/sentiment_miner
      dockerfile: Dockerfile
    container_name: mockpilot-sentiment-miner
    ports:
      - "8004:8004"
    depends_on:
      - redis
      - weaviate
      - mongodb
      - demographic_classifier
    environment:
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WEAVIATE_URL=http://weaviate:8080
      - MONGODB_URI=mongodb://mongodb:27017/mockpilot_sentiment_cache
      - REDIS_DESIGN_SPECS_CHANNEL_NAME=design_specs
      - REDIS_INSIGHTS_CHANNEL_NAME=insights
      - DEMOGRAPHIC_CLASSIFIER_URL=demographic_classifier:8005
    volumes:
      - ../../backend/sentiment_miner:/app
      - sentiment_cache:/app/.cache
    restart: unless-stopped
    networks:
      - mockpilot_network

  demographic_classifier:
    build:
      context: ../../backend/demographic_classifier
      dockerfile: Dockerfile
    container_name: mockpilot-demographic-classifier
    ports:
      - "8005:8005"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ../../backend/demographic_classifier:/app
      - demographic_cache:/app/.cache
    restart: unless-stopped
    networks:
      - mockpilot_network

  # --- Frontend ---
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    container_name: mockpilot-frontend
    ports:
      - "5173:5173"
    depends_on:
      - orchestrator
    environment:
      - VITE_ORCHESTRATOR_WS_URL=ws://localhost:8000/v1/ws
      - NODE_ENV=development
    volumes:
      - ../../frontend:/app
      - /app/node_modules
    restart: unless-stopped
    networks:
      - mockpilot_network

volumes:
  redis_data:
    driver: local
  weaviate_data:
    driver: local
  mongodb_data:
    driver: local
  orchestrator_cache:
    driver: local
  stt_cache:
    driver: local
  intent_cache:
    driver: local
  code_gen_cache:
    driver: local
  sentiment_cache:
    driver: local
  demographic_cache:
    driver: local

networks:
  mockpilot_network:
    driver: bridge
