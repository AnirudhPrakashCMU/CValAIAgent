[tool.poetry]
name = "mockpilot-orchestrator"
version = "0.1.0"
description = "Orchestrator service for MockPilot, handling WebSocket connections, API requests, and message bus interactions."
authors = ["AI Engineer <ai@example.com>"]
license = "MIT"
readme = "README.md" # Assuming a README will be created for this service
packages = [{include = "orchestrator", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.111.0"
uvicorn = {extras = ["standard"], version = "^0.30.1"}
redis = {extras = ["hiredis"], version = "^5.0.7"} # hiredis for performance
# aioredis is now part of the redis package itself for async operations.
websockets = "^12.0" # For FastAPI WebSocket support
python-jose = {extras = ["cryptography"], version = "^3.3.0"} # For JWT handling
pydantic = "^2.8.2"
pydantic-settings = "^2.3.4" # For loading settings from .env
python-dotenv = "^1.0.1" # To load .env files (pydantic-settings also does this)
structlog = "^24.1.0" # For structured logging
# httpx is good for making async requests if the orchestrator needs to call other services,
# but primarily it's a server. Let's add it as it's often useful.
httpx = "^0.27.0"
async-timeout = "^4.0.3" # Useful for managing asyncio tasks

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
pytest-asyncio = "^0.23.7"
# httpx is already in main dependencies, useful for testing FastAPI endpoints
black = "^24.4.2"
isort = "^5.13.2"
flake8 = "^7.1.0"
mypy = "^1.10.1"
types-redis = "^4.6.0.20240523"
# types-python-jose if available and needed, often not well-maintained
# types-structlog if available

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Can be set to false for stricter checks if all stubs are available
# exclude = ['src/orchestrator/vendor/'] # Example: if you have vendored code
